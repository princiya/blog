{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","pageContext","data","location","tag","allMarkdownRemark","edges","totalCount","tagHeader","siteTitle","get","title","margin","to","posts","langKey"],"mappings":"4FAAA,qGAoDeA,UA3CF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACzBC,EAAQH,EAARG,IACR,EAA8BF,EAAKG,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAGTK,EAAYC,IAAIR,EAAM,2BAE5B,OACE,kBAAC,IAAD,CAAQC,SAAUA,EAAUQ,MAAOF,EAAWG,OAAO,UACnD,kBAAC,IAAD,MACA,4BAAKJ,GACL,kBAAC,OAAD,CAAMK,GAAG,SAAT,kBACCN,EAAa,GACZ,kBAAC,IAAD,CAAWO,MAAOR,EAAOS,QAASd,EAAYc","file":"component---src-templates-tags-js-369d89dc688fc410ead8.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, graphql } from 'gatsby';\nimport get from 'lodash/get';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport BlogItems from '../components/BlogItems';\n\nconst Tags = ({ pageContext, data, location }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } tagged with \"${tag}\"`;\n  const siteTitle = get(data, 'site.siteMetadata.title');\n\n  return (\n    <Layout location={location} title={siteTitle} margin=\"custom\">\n      <SEO />\n      <h1>{tagHeader}</h1>\n      <Link to=\"/tags\">All categories</Link>\n      {totalCount > 0 && (\n        <BlogItems posts={edges} langKey={pageContext.langKey} />\n      )}\n    </Layout>\n  );\n};\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            langKey\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            spoiler\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}